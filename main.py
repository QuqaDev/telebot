import telebot
from telebot import types

bot = telebot.TeleBot('6871427421:AAF2WAK3Kh7O4gVcue_tmjAMkGlJUuWgF68')

# –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
start_message = """–ü—Ä–∏–≤–µ—Ç, üê∞! –ú–Ω–µ –Ω–µ —Ç–µ—Ä–ø–∏—Ç—Å—è –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –í–∞–º–∏, –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ö–æ—Ç–µ–ª –±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.
–ú—ã –û–û–û ¬´–≠–∫–æ–ª—å¬ª - –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —Å –ø–µ—Ä–µ–¥–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –±—ã—Ç–æ–≤–æ–π —Ö–∏–º–∏–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
–ú—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å—Ç–∏—Ä–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ—à–æ–∫, –±–µ–ª–∏–∑–Ω—É, –∞ —Ç–∞–∫–∂–µ –∫–∞–ª—å—Ü–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–æ–¥—É.
–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"""

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
previous_message_dict = {}

# –°–æ–∑–¥–∞–Ω–∏–µ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton('–ü—Ä–æ–¥—É–∫—Ü–∏—è', callback_data='products'),
               types.InlineKeyboardButton('–ì–¥–µ –Ω–∞–π—Ç–∏?', callback_data='find'))
    markup.row(types.InlineKeyboardButton('–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞–º', callback_data='distributors'),
               types.InlineKeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='contacts'))
    markup.row(types.InlineKeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data='question'))
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
def create_product_menu():
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton('–ó–∏—Ñ–∞', callback_data='zifa'),
               types.InlineKeyboardButton('–õ—É—á', callback_data='luch'))
    markup.row(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'))
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
def create_location_menu():
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton('–£—Ñ–∞', callback_data='ufa'),
               types.InlineKeyboardButton('–°–∞–ª–∞–≤–∞—Ç', callback_data='salavat'),
               types.InlineKeyboardButton('–ò—à–∏–º–±–∞–π', callback_data='ishimbay'))
    markup.row(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'))
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_back_menu():
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back'))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_start(message):
    markup = create_main_menu()
    msg = bot.send_message(message.chat.id, start_message, reply_markup=markup)
    previous_message_dict[message.chat.id] = msg.message_id
    bot.register_next_step_handler(msg, process_main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ Inline –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    chat_id = call.message.chat.id
    if call.data == 'products':
        send_product_menu(call.message)
    elif call.data == 'find':
        send_location_menu(call.message)
    elif call.data == 'distributors':
        bot.send_message(chat_id, "–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞–º")
    elif call.data == 'contacts':
        bot.send_message(chat_id, "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
    elif call.data == 'question':
        bot.send_message(chat_id, "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    elif call.data == 'zifa' or call.data == 'luch':
        send_product_info(call)
    elif call.data == 'ufa' or call.data == 'salavat' or call.data == 'ishimbay':
        send_adress(call)
    elif call.data == 'back':
        send_previous_menu(chat_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
def process_main_menu(message):
    if message.text == '–ü—Ä–æ–¥—É–∫—Ü–∏—è':
        send_product_menu(message)
    elif message.text == '–ì–¥–µ –Ω–∞–π—Ç–∏?':
        send_location_menu(message)

def send_adress(call):
    if call.data == 'ufa':
        markup = create_back_menu()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="dddddddddddddddddddddddddddddddddd...", reply_markup=markup)
    elif call.data == 'salavat':
        markup = create_back_menu()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="sdadadadasd", reply_markup=markup)
    elif call.data == 'ishimbay':
        markup = create_back_menu()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="22222222222222222222222", reply_markup=markup)

# –û—Ç–ø—Ä–∞–≤–∫–∞ Inline –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
def send_product_menu(message):
    markup = create_product_menu()
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é:", reply_markup=markup)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏
# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
def send_product_info(call):
    chat_id = call.message.chat.id
    if call.data == 'zifa':
        photo_path = 'C:\\Users\\halik\\PycharmProjects\\pythonProject1\\zifa-auto.jpg'
        sent_message = bot.send_photo(chat_id, open(photo_path, 'rb'), caption="–ü–æ—Ä–æ—à–æ–∫ –ó–∏—Ñ–∞\n\n–°–æ—Å—Ç–∞–≤: ...", reply_markup=create_back_menu())
    elif call.data == 'luch':
        photo_path = 'C:\\Users\\halik\\PycharmProjects\\pythonProject1\\luch.jpg'
        sent_message = bot.send_photo(chat_id, open(photo_path, 'rb'), caption="–ü–æ—Ä–æ—à–æ–∫ –õ—É—á\n\n–°–æ—Å—Ç–∞–≤: ...", reply_markup=create_back_menu())
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    if chat_id in previous_message_dict:
        previous_message_id = previous_message_dict[chat_id]
        try:
            bot.delete_message(chat_id, previous_message_id)
        except telebot.apihelper.ApiTelegramException as e:
            print(f"Error deleting previous message: {e}")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    previous_message_dict[chat_id] = sent_message.message_id

# –û—Ç–ø—Ä–∞–≤–∫–∞ Inline –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
def send_location_menu(message):
    markup = create_location_menu()
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'back')
def back_button_handler(call):
    chat_id = call.message.chat.id
    send_previous_menu(chat_id)

def send_previous_menu(chat_id):
    if chat_id in previous_message_dict:
        previous_message_id = previous_message_dict.get(chat_id)
        if previous_message_id:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
                sent_message = bot.send_message(chat_id, start_message, reply_markup=create_main_menu())
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.delete_message(chat_id, previous_message_id)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                previous_message_dict[chat_id] = sent_message.message_id
            except telebot.apihelper.ApiTelegramException as e:
                print(f"Error sending or deleting previous message: {e}")
        else:
            print("Previous message id not found for chat:", chat_id)
    else:
        print("Chat id not found in previous_message_dict:", chat_id)

bot.polling(none_stop=True)

